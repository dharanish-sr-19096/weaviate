// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileReplicationServiceClient is the client API for FileReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileReplicationServiceClient interface {
	PauseFileActivity(ctx context.Context, in *PauseFileActivityRequest, opts ...grpc.CallOption) (*PauseFileActivityResponse, error)
	ResumeFileActivity(ctx context.Context, in *ResumeFileActivityRequest, opts ...grpc.CallOption) (*ResumeFileActivityResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	GetFileMetadata(ctx context.Context, opts ...grpc.CallOption) (FileReplicationService_GetFileMetadataClient, error)
	GetFile(ctx context.Context, opts ...grpc.CallOption) (FileReplicationService_GetFileClient, error)
}

type fileReplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileReplicationServiceClient(cc grpc.ClientConnInterface) FileReplicationServiceClient {
	return &fileReplicationServiceClient{cc}
}

func (c *fileReplicationServiceClient) PauseFileActivity(ctx context.Context, in *PauseFileActivityRequest, opts ...grpc.CallOption) (*PauseFileActivityResponse, error) {
	out := new(PauseFileActivityResponse)
	err := c.cc.Invoke(ctx, "/weaviate.v1.FileReplicationService/PauseFileActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicationServiceClient) ResumeFileActivity(ctx context.Context, in *ResumeFileActivityRequest, opts ...grpc.CallOption) (*ResumeFileActivityResponse, error) {
	out := new(ResumeFileActivityResponse)
	err := c.cc.Invoke(ctx, "/weaviate.v1.FileReplicationService/ResumeFileActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicationServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/weaviate.v1.FileReplicationService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicationServiceClient) GetFileMetadata(ctx context.Context, opts ...grpc.CallOption) (FileReplicationService_GetFileMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileReplicationService_ServiceDesc.Streams[0], "/weaviate.v1.FileReplicationService/GetFileMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileReplicationServiceGetFileMetadataClient{stream}
	return x, nil
}

type FileReplicationService_GetFileMetadataClient interface {
	Send(*GetFileMetadataRequest) error
	Recv() (*FileMetadata, error)
	grpc.ClientStream
}

type fileReplicationServiceGetFileMetadataClient struct {
	grpc.ClientStream
}

func (x *fileReplicationServiceGetFileMetadataClient) Send(m *GetFileMetadataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileReplicationServiceGetFileMetadataClient) Recv() (*FileMetadata, error) {
	m := new(FileMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileReplicationServiceClient) GetFile(ctx context.Context, opts ...grpc.CallOption) (FileReplicationService_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileReplicationService_ServiceDesc.Streams[1], "/weaviate.v1.FileReplicationService/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileReplicationServiceGetFileClient{stream}
	return x, nil
}

type FileReplicationService_GetFileClient interface {
	Send(*GetFileRequest) error
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileReplicationServiceGetFileClient struct {
	grpc.ClientStream
}

func (x *fileReplicationServiceGetFileClient) Send(m *GetFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileReplicationServiceGetFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileReplicationServiceServer is the server API for FileReplicationService service.
// All implementations must embed UnimplementedFileReplicationServiceServer
// for forward compatibility
type FileReplicationServiceServer interface {
	PauseFileActivity(context.Context, *PauseFileActivityRequest) (*PauseFileActivityResponse, error)
	ResumeFileActivity(context.Context, *ResumeFileActivityRequest) (*ResumeFileActivityResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	GetFileMetadata(FileReplicationService_GetFileMetadataServer) error
	GetFile(FileReplicationService_GetFileServer) error
	mustEmbedUnimplementedFileReplicationServiceServer()
}

// UnimplementedFileReplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileReplicationServiceServer struct {
}

func (UnimplementedFileReplicationServiceServer) PauseFileActivity(context.Context, *PauseFileActivityRequest) (*PauseFileActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFileActivity not implemented")
}
func (UnimplementedFileReplicationServiceServer) ResumeFileActivity(context.Context, *ResumeFileActivityRequest) (*ResumeFileActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFileActivity not implemented")
}
func (UnimplementedFileReplicationServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileReplicationServiceServer) GetFileMetadata(FileReplicationService_GetFileMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedFileReplicationServiceServer) GetFile(FileReplicationService_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileReplicationServiceServer) mustEmbedUnimplementedFileReplicationServiceServer() {
}

// UnsafeFileReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileReplicationServiceServer will
// result in compilation errors.
type UnsafeFileReplicationServiceServer interface {
	mustEmbedUnimplementedFileReplicationServiceServer()
}

func RegisterFileReplicationServiceServer(s grpc.ServiceRegistrar, srv FileReplicationServiceServer) {
	s.RegisterService(&FileReplicationService_ServiceDesc, srv)
}

func _FileReplicationService_PauseFileActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseFileActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicationServiceServer).PauseFileActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.FileReplicationService/PauseFileActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicationServiceServer).PauseFileActivity(ctx, req.(*PauseFileActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicationService_ResumeFileActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeFileActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicationServiceServer).ResumeFileActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.FileReplicationService/ResumeFileActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicationServiceServer).ResumeFileActivity(ctx, req.(*ResumeFileActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicationService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicationServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.FileReplicationService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicationServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicationService_GetFileMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileReplicationServiceServer).GetFileMetadata(&fileReplicationServiceGetFileMetadataServer{stream})
}

type FileReplicationService_GetFileMetadataServer interface {
	Send(*FileMetadata) error
	Recv() (*GetFileMetadataRequest, error)
	grpc.ServerStream
}

type fileReplicationServiceGetFileMetadataServer struct {
	grpc.ServerStream
}

func (x *fileReplicationServiceGetFileMetadataServer) Send(m *FileMetadata) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileReplicationServiceGetFileMetadataServer) Recv() (*GetFileMetadataRequest, error) {
	m := new(GetFileMetadataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileReplicationService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileReplicationServiceServer).GetFile(&fileReplicationServiceGetFileServer{stream})
}

type FileReplicationService_GetFileServer interface {
	Send(*FileChunk) error
	Recv() (*GetFileRequest, error)
	grpc.ServerStream
}

type fileReplicationServiceGetFileServer struct {
	grpc.ServerStream
}

func (x *fileReplicationServiceGetFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileReplicationServiceGetFileServer) Recv() (*GetFileRequest, error) {
	m := new(GetFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileReplicationService_ServiceDesc is the grpc.ServiceDesc for FileReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weaviate.v1.FileReplicationService",
	HandlerType: (*FileReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PauseFileActivity",
			Handler:    _FileReplicationService_PauseFileActivity_Handler,
		},
		{
			MethodName: "ResumeFileActivity",
			Handler:    _FileReplicationService_ResumeFileActivity_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FileReplicationService_ListFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileMetadata",
			Handler:       _FileReplicationService_GetFileMetadata_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileReplicationService_GetFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/file_replication.proto",
}
