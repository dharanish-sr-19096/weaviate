//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// ReplicateManyReader is a Reader for the ReplicateMany structure.
type ReplicateManyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplicateManyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplicateManyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplicateManyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReplicateManyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplicateManyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewReplicateManyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplicateManyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewReplicateManyNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReplicateManyOK creates a ReplicateManyOK with default headers values
func NewReplicateManyOK() *ReplicateManyOK {
	return &ReplicateManyOK{}
}

/*
ReplicateManyOK describes a response with status code 200, with default header values.

Replication operations registered successfully. IDs of the operation is returned.
*/
type ReplicateManyOK struct {
	Payload []*models.ReplicationReplicateReplicaResponse
}

// IsSuccess returns true when this replicate many o k response has a 2xx status code
func (o *ReplicateManyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replicate many o k response has a 3xx status code
func (o *ReplicateManyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many o k response has a 4xx status code
func (o *ReplicateManyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replicate many o k response has a 5xx status code
func (o *ReplicateManyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replicate many o k response a status code equal to that given
func (o *ReplicateManyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replicate many o k response
func (o *ReplicateManyOK) Code() int {
	return 200
}

func (o *ReplicateManyOK) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyOK  %+v", 200, o.Payload)
}

func (o *ReplicateManyOK) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyOK  %+v", 200, o.Payload)
}

func (o *ReplicateManyOK) GetPayload() []*models.ReplicationReplicateReplicaResponse {
	return o.Payload
}

func (o *ReplicateManyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicateManyBadRequest creates a ReplicateManyBadRequest with default headers values
func NewReplicateManyBadRequest() *ReplicateManyBadRequest {
	return &ReplicateManyBadRequest{}
}

/*
ReplicateManyBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type ReplicateManyBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replicate many bad request response has a 2xx status code
func (o *ReplicateManyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replicate many bad request response has a 3xx status code
func (o *ReplicateManyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many bad request response has a 4xx status code
func (o *ReplicateManyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replicate many bad request response has a 5xx status code
func (o *ReplicateManyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replicate many bad request response a status code equal to that given
func (o *ReplicateManyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replicate many bad request response
func (o *ReplicateManyBadRequest) Code() int {
	return 400
}

func (o *ReplicateManyBadRequest) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyBadRequest  %+v", 400, o.Payload)
}

func (o *ReplicateManyBadRequest) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyBadRequest  %+v", 400, o.Payload)
}

func (o *ReplicateManyBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicateManyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicateManyUnauthorized creates a ReplicateManyUnauthorized with default headers values
func NewReplicateManyUnauthorized() *ReplicateManyUnauthorized {
	return &ReplicateManyUnauthorized{}
}

/*
ReplicateManyUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type ReplicateManyUnauthorized struct {
}

// IsSuccess returns true when this replicate many unauthorized response has a 2xx status code
func (o *ReplicateManyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replicate many unauthorized response has a 3xx status code
func (o *ReplicateManyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many unauthorized response has a 4xx status code
func (o *ReplicateManyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this replicate many unauthorized response has a 5xx status code
func (o *ReplicateManyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this replicate many unauthorized response a status code equal to that given
func (o *ReplicateManyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the replicate many unauthorized response
func (o *ReplicateManyUnauthorized) Code() int {
	return 401
}

func (o *ReplicateManyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyUnauthorized ", 401)
}

func (o *ReplicateManyUnauthorized) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyUnauthorized ", 401)
}

func (o *ReplicateManyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplicateManyForbidden creates a ReplicateManyForbidden with default headers values
func NewReplicateManyForbidden() *ReplicateManyForbidden {
	return &ReplicateManyForbidden{}
}

/*
ReplicateManyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReplicateManyForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replicate many forbidden response has a 2xx status code
func (o *ReplicateManyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replicate many forbidden response has a 3xx status code
func (o *ReplicateManyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many forbidden response has a 4xx status code
func (o *ReplicateManyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this replicate many forbidden response has a 5xx status code
func (o *ReplicateManyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this replicate many forbidden response a status code equal to that given
func (o *ReplicateManyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the replicate many forbidden response
func (o *ReplicateManyForbidden) Code() int {
	return 403
}

func (o *ReplicateManyForbidden) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyForbidden  %+v", 403, o.Payload)
}

func (o *ReplicateManyForbidden) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyForbidden  %+v", 403, o.Payload)
}

func (o *ReplicateManyForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicateManyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicateManyUnprocessableEntity creates a ReplicateManyUnprocessableEntity with default headers values
func NewReplicateManyUnprocessableEntity() *ReplicateManyUnprocessableEntity {
	return &ReplicateManyUnprocessableEntity{}
}

/*
ReplicateManyUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous.
*/
type ReplicateManyUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replicate many unprocessable entity response has a 2xx status code
func (o *ReplicateManyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replicate many unprocessable entity response has a 3xx status code
func (o *ReplicateManyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many unprocessable entity response has a 4xx status code
func (o *ReplicateManyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this replicate many unprocessable entity response has a 5xx status code
func (o *ReplicateManyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this replicate many unprocessable entity response a status code equal to that given
func (o *ReplicateManyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the replicate many unprocessable entity response
func (o *ReplicateManyUnprocessableEntity) Code() int {
	return 422
}

func (o *ReplicateManyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReplicateManyUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReplicateManyUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicateManyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicateManyInternalServerError creates a ReplicateManyInternalServerError with default headers values
func NewReplicateManyInternalServerError() *ReplicateManyInternalServerError {
	return &ReplicateManyInternalServerError{}
}

/*
ReplicateManyInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type ReplicateManyInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replicate many internal server error response has a 2xx status code
func (o *ReplicateManyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replicate many internal server error response has a 3xx status code
func (o *ReplicateManyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many internal server error response has a 4xx status code
func (o *ReplicateManyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this replicate many internal server error response has a 5xx status code
func (o *ReplicateManyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this replicate many internal server error response a status code equal to that given
func (o *ReplicateManyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the replicate many internal server error response
func (o *ReplicateManyInternalServerError) Code() int {
	return 500
}

func (o *ReplicateManyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplicateManyInternalServerError) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplicateManyInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicateManyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicateManyNotImplemented creates a ReplicateManyNotImplemented with default headers values
func NewReplicateManyNotImplemented() *ReplicateManyNotImplemented {
	return &ReplicateManyNotImplemented{}
}

/*
ReplicateManyNotImplemented describes a response with status code 501, with default header values.

Replica movement operations are disabled.
*/
type ReplicateManyNotImplemented struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replicate many not implemented response has a 2xx status code
func (o *ReplicateManyNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replicate many not implemented response has a 3xx status code
func (o *ReplicateManyNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replicate many not implemented response has a 4xx status code
func (o *ReplicateManyNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this replicate many not implemented response has a 5xx status code
func (o *ReplicateManyNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this replicate many not implemented response a status code equal to that given
func (o *ReplicateManyNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the replicate many not implemented response
func (o *ReplicateManyNotImplemented) Code() int {
	return 501
}

func (o *ReplicateManyNotImplemented) Error() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyNotImplemented  %+v", 501, o.Payload)
}

func (o *ReplicateManyNotImplemented) String() string {
	return fmt.Sprintf("[POST /replication/replicate-many][%d] replicateManyNotImplemented  %+v", 501, o.Payload)
}

func (o *ReplicateManyNotImplemented) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicateManyNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
